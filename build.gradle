buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
	}

	dependencies {
		File libFile=file('lib');
		if (libFile.exists()&&libFile.list()!=null&&libFile.list().length>0) {
			classpath fileTree(dir: 'extlib', include: '*.jar')
			classpath fileTree(dir: 'lib', include: '*.jar')
		} else {
			classpath fileTree(dir: 'extlib', include: '*.jar')
			//sqlapp
			[
				'sqlapp-core',
				'sqlapp-command',
				'sqlapp-gradle-plugin',
				"sqlapp-core-${db}"
			].each { name -> classpath "com.sqlapp:${name}:+" }

			if ("${jdbc_driver}"!="") {
				classpath "${jdbc_driver}"
			}
		}
	}
}

plugins {
	id 'com.sqlapp.db' version '0.12.25'
	id 'java'
	id 'java-library'
}
import java.io.File
import java.util.function.Predicate

import org.gradle.api.tasks.Input
import org.gradle.api.tasks.InputDirectory
import org.gradle.api.tasks.InputFile
import org.gradle.api.tasks.Optional

group = 'com.sqlapp'
//archivesBaseName = 'sample-db'
//version = System.properties['version'] ?: '1.0.0'

project.extensions.loadTimeEnvironment=true
project.extensions.defaultEnvironment="local"
project.extensions.environmentFilePath="src/main/config"
	
// Encoding
//tasks.withType(compile) each { it.options.encoding = 'UTF-8' }

compileJava {
	options.encoding = 'UTF-8'
}

compileTestJava {
	options.encoding = 'UTF-8'
}

def base = System.properties['project.root']
if (base==null){
	base='./'
}


def masterSchemaName="app_master${schemaNameSuffix}"
def commonSchemaName="app_common${schemaNameSuffix}"
def tranSchemaName="app_tran${schemaNameSuffix}"
String[] targetSchemas=[] as String[]

def changeLogTableName="changelog"

def exportDataTargetTables=[] as String[]
def exportXmlWithRowDumpTables=[] as String[]
def font="${font}"

// add Repository
repositories {
	mavenLocal()
	mavenCentral()
}

configurations {
	all*.exclude group: "log4j", module: "log4j"
	all*.exclude group: "org.projectlombok", module: "lombok"
}

// search dependencies by http://mvnrepository.com/
dependencies {
	File libFile=file('lib');
	if (libFile.exists()&&libFile.list()!=null&&libFile.list().length>0) {
		implementation fileTree(dir: 'extlib', include: '*.jar')
		implementation fileTree(dir: 'lib', include: '*.jar')
	} else {
		implementation fileTree(dir: 'extlib', include: '*.jar')
		implementation 'org.codehaus.janino:janino:2.7.8'
		//DB
		if ("${jdbc_driver}"!="") {
			implementation "${jdbc_driver}"
		}
		implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'
		
		//sqlapp
		[
			'sqlapp-core',
			'sqlapp-command',
			'sqlapp-gradle-plugin',
			"sqlapp-core-${db}"
		].each { name -> implementation "com.sqlapp:${name}:+" }
	}
}

wrapper {
	gradleVersion = '7.4.1'
}

//copy library
task copyLib(type: Copy){
	from configurations.implementation
	into 'lib'
}

//cleanup library
task cleanLib(){
	file('lib').deleteDir();
	file('lib').mkdir()
}

//cleanup and copy library
task deploy {
	dependsOn cleanLib,copyLib
}

//Export Schema XML
exportXml {
	debug=true
	dataSource {
//		driverClassName=jdbc.connection.driverClassName
//		url=jdbc.connection.url
//		username=jdbc.connection.username
//		password=jdbc.connection.password
		properties "${jdbcConfigPath}"
	}
//	target="catalog" or "schema" or "tables" or...
	target="${schema_level}"
	outputPath=file("schemas")
	outputFileName="${schema_level}.xml"
	dumpRows=true
	includeSchemas targetSchemas
	includeRowDumpTables exportXmlWithRowDumpTables
}

//Drop all tables
dropObjects {
	debug=true
	dataSource {
		properties "${jdbcConfigPath}"
	}
	includeSchemas targetSchemas
//	preDropTableSql="SET SESSION FOREIGN_KEY_CHECKS=0"
//	afterDropTableSql="SET SESSION FOREIGN_KEY_CHECKS=1"
	dropObjects=false
	dropTables=true
}

//Output Table rows count
countAllTables {
	debug=true
	dataSource {
		properties "${jdbcConfigPath}"
	}
	includeSchemas targetSchemas
	outputFormatType="TABLE"
}

//Execute DB schema version up
versionUp {
	debug=true
	dataSource {
		properties "${jdbcConfigPath}"
	}
	parameters=['schemaNameSuffix':"${schemaNameSuffix}"]
	sqlDirectory=file("src/main/sql")
	fileDirectory=file("src/main/resources")
	encoding="UTF8"
	lastChangeNumber="${lastChangeToApply}"
	showVersionOnly=false
	withSeriesNumber=true
	placeholderPrefix='${';
	placeholderSuffix='}';
	placeholders=true;
	changeTable{
		name="${masterSchemaName}.${changeLogTableName}"
//		idColumnName="id"
//		appliedByColumnName="applied_by"
		appliedAtColumnName="complete_dt"
//		descriptionColumnName="description"
//		seriesNumberColumnName="seriesNumber"
	}
}

//Repair DB schema version up
versionRepair {
	debug=true
	parameters=['schemaNameSuffix':"${schemaNameSuffix}"]
}

//Execute DB schema version down
versionDown {
	debug=true
	parameters=['schemaNameSuffix':"${schemaNameSuffix}"]
	sqlDirectory=file("src/main/sql")
	fileDirectory=file("src/main/resources")
	encoding="UTF8"
	showVersionOnly=false
	withSeriesNumber=true
	placeholderPrefix='${';
	placeholderSuffix='}';
	placeholders=true;
}

//Import to DB
importData {
	debug=true
	dataSource {
		properties "${jdbcConfigPath}"
	}
	parameters=[:]
	useSchemaNameDirectory=false
	useTableNameDirectory=false
	directory=file("src/main/export")
	fileDirectory=file("src/main/resources")
	csvEncoding="UTF8"
	sqlType="MERGE_ROW"
	placeholderPrefix='${';
	placeholderSuffix='}';
	placeholders=true;
//	fileFilter={f->true}
	includeSchemas targetSchemas
//	includeTables "a", "b"
	tableOptions {
		commitPerTable=true
		dmlBatchSize={table->50}
//		withCoalesceAtUpdate={c->(c.name=='sub_service_class')}
		optimisticLockColumn={c->(c.name=='lock_version'||c.name=='version_no')}
	}
}

//Export from DB
exportData {
	debug=true
	dataSource {
		properties "${jdbcConfigPath}"
	}
	parameters=[:]
	useSchemaNameDirectory=false
	directory=file("src/main/export")
	csvEncoding="UTF8"
	//xls,xlsx,ods,csv,tsv,xml,json
	outputFileType="xlsx"
//	fileFilter={f->true}
	includeSchemas targetSchemas
	includeTables exportDataTargetTables
	tableOptions {
		
	}
}

//Convert data file to Excel format.
task('toExcel', type: com.sqlapp.gradle.plugins.ConvertDataFileTask) {
	debug=false
	directory=file("src/main/export")
//	fileFilter={f->true}
//	csvEncoding="UTF8"
//	recursive=false
//	sheetName="TABLE"
	outputFileType="xlsx"
//	removeOriginalFile=true
//	outputDirectory=file("src/main/export2")
}

//Convert data file to JSON format.
task('toJson', type: com.sqlapp.gradle.plugins.ConvertDataFileTask) {
	debug=false
	directory=file("src/main/export")
//	fileFilter={f->true}
	recursive=false
	sheetName="TABLE"
	outputFileType="json"
	removeOriginalFile=true
//	outputDirectory=file("src/main/export2")
}

//Convert data file to CSV format.
task('toCsv', type: com.sqlapp.gradle.plugins.ConvertDataFileTask) {
	debug=false
	directory=file("src/main/export")
//	fileFilter={f->true}
	csvEncoding="UTF8"
	recursive=false
	sheetName="TABLE"
	outputFileType="csv"
	removeOriginalFile=true
//	outputDirectory=file("src/main/export2")
}

//Output Diff of XML
diffSchemaXml{
	originalFile=file("schemas/base/${schema_level}.xml")
	targetFile=file("schemas/${schema_level}.xml")
	equalsHandler {
//		referenceEqualsPredicate={(a,b)->a==null&&b==null||a!=null&&a.is(b)||b!=null&&b.is()}
//		valueEqualsPredicate={(propertyName,eq, obj1, obj2, val1, val2)->eq}
//		equalsLastPredicate={(a,b)->true}
	}
}

//move XML
task mvXml {
	doLast {
		File schemaFile=file("schemas/base/${schema_level}.xml");
		if (schemaFile.exists()) {
			schemaFile.delete();
		} else {
			File parent=schemaFile.getParentFile();
			parent.mkdirs();
		}
		file("schemas/${schema_level}.xml").renameTo(file("schemas/base/${schema_level}.xml"))
	}
}

//zip HTML
task zipHtml(type: Zip) {
	from 'html'
	archiveName 'html.zip'
	destinationDir(file('./'))
}

//Generate ALTER SQL by Schema XML Diff 
generateDiffSql{
	originalFile="schemas/base/${schema_level}.xml"
	targetFile="schemas/${schema_level}.xml"
	encoding="UTF8"
	outputAsMultiFiles=false
	withVersionDown=true
	outputPath=file("src/main/sql")
	outputFileExtension="sql"
//	lastChangeNumber="${lastChangeToApply}"
	changeNumberStep=10
//	numberOfDigits=19
	numberOfDigits=9
	equalsHandler {
//		referenceEqualsPredicate={(a,b)->a==null&&b==null||a!=null&&a.is(b)||b!=null&&b.is()}
//		valueEqualsPredicate={(propertyName,eq, obj1, obj2, val1, val2)->eq}
//		equalsLastPredicate={(a,b)->true}
	}
	schemaOptions {
		outputCommit=false
		dropIfExists=true
		createIfNotExists=true
		decorateSchemaName=false
		setSearchPathToSchema=true
		tableOptions {
			
		}
	}
}

//Generate SQL by schema XML
generateSql{
	targetFile="schemas/base/${schema_level}.xml"
	encoding="UTF8"
	outputAsMultiFiles=true
	outputPath=file("src/main/gensql")
	outputFileExtension="sql"
//	lastChangeNumber="${lastChangeToApply}"
	changeNumberStep=10
//	numberOfDigits=19
	numberOfDigits=9
	schemaOptions {
		outputCommit=false
		dropIfExists=true
		createIfNotExists=true
		decorateSchemaName=false
		setSearchPathToSchema=true
		tableOptions {
			
		}
	}
}

//Generate or Update Dictionaries for HTML
updateDictionaries{
	withSchema={filename->true}
	targetFile=file("schemas/base/${schema_level}.xml")
	dictionaryFileDirectory=file("src/main/dictionaries")
	dictionaryFileType="xlsx"
}

//Generate HTML Document
generateHtml{
	targetFile=file("schemas/base/${schema_level}.xml")
	dictionaryFileDirectory=file("src/main/dictionaries")
	dictionaryFileType="xml"
	outputDirectory=file("html/")
	diagramFont=font
	multiThread=true
	//
	useSchemaNameDirectory=false
	useTableNameDirectory=false
	directory=file("src/main/export")
	fileDirectory=file("src/main/resources")
	csvEncoding="UTF8"
	placeholderPrefix='${';
	placeholderSuffix='}';
	placeholders=true;
//	fileFilter={f->true}
	//
	foreignKeyDefinitionDirectory=file("src/main/foreignkey")
}

//Display MySQL connection info
task('showConnections', type: com.sqlapp.gradle.plugins.SqlQueryTask) {
	debug=false
	dataSource {
		properties "${jdbcConfigPath}"
	}
	sql="show processlist"
	outputFormatType="TABLE"
}

//Display MySQL Errors
task('showErrors', type: com.sqlapp.gradle.plugins.SqlQueryTask) {
	debug=false
	dataSource {
		properties "${jdbcConfigPath}"
	}
	sql="SHOW ERRORS"
	outputFormatType="TABLE"
}

//Display MySQL Warnings
task('showWarnings', type: com.sqlapp.gradle.plugins.SqlQueryTask) {
	debug=false
	dataSource {
		properties "${jdbcConfigPath}"
	}
	sql="SHOW WARNINGS"
	outputFormatType="TABLE"
}
